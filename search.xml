<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[RN 可拖拽交换的Item]]></title>
      <url>http://hzmyj.github.io/2017/07/25/%E5%8F%AF%E6%8B%96%E5%8A%A8%E4%BA%A4%E6%8D%A2%E7%9A%84Item/</url>
      <content type="html"><![CDATA[<p>　　项目需求里让制作可拖拽交换的一个<code>&lt;ItemList /&gt;</code>，第一想法是找一个第三方组件，然而github上就找到了一个，还不是太好用，正好看到有大神自己制作了一个，并将原理以及代码贴了出来，遂研究一下，会更加详尽的解释一些东西。</p>
<a id="more"></a>
<p>　　先贴上<a href="http://blog.csdn.net/w337198302/article/details/53374506" target="_blank" rel="external">原文地址</a></p>
<p>　　思路是布局 –&gt; item点击突出显示 –&gt; item可移动 –&gt; item可交换 –&gt; 松开手指恢复正确位置</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>　　因为item比较少，所以直接用<code>map</code>函数返回一个个的item，形成ListView。</p>
<p>　　粗略做了个导航栏，意思一下就行。</p>
<p>　　这里暂且做成单页，所有代码放一起，另导航栏和item的高都是49。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  StyleSheet,</div><div class="line">  Dimensions</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</div><div class="line">const width = Dimensions.get(&apos;window&apos;).width;</div><div class="line"></div><div class="line">export default class Look extends Component&#123;</div><div class="line">  constructor(props)&#123;</div><div class="line">    super(props);</div><div class="line">    this.names = [&apos;Android&apos;,&apos;iOS&apos;,&apos;前端&apos;,&apos;拓展资源&apos;,&apos;休息视频&apos;];</div><div class="line">    this.items = [];</div><div class="line">    this.order = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    return(</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;View style=&#123;styles.bar&#125;&gt;</div><div class="line">          &lt;Text&gt;导航&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">        &#123;this.names.map((item, i)=&gt;&#123;</div><div class="line">          this.order.push(item);</div><div class="line">          return (</div><div class="line">            &lt;View</div><div class="line">              // 在未写相应函数前，此语句会报错，故先注释掉，最后再添入</div><div class="line">              // &#123;...this._panResponder.panHandlers&#125;</div><div class="line">              ref=&#123;(ref) =&gt; this.items[i] = ref&#125;</div><div class="line">              key=&#123;i&#125;</div><div class="line">              style=&#123;[styles.item, &#123;top: (i+1)*49&#125;]&#125;&gt;</div><div class="line">              &lt;Icon name=&quot;bars&quot; size=&#123;25&#125; color=&quot;#ccc&quot;/&gt;</div><div class="line">              &lt;Text style=&#123;styles.itemTitle&#125;&gt;&#123;item&#125;&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">          );</div><div class="line">        &#125;)&#125;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">  &#125;,</div><div class="line">  item: &#123;</div><div class="line">    flexDirection: &apos;row&apos;,</div><div class="line">    height: 49,</div><div class="line">    width: width,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#fff&apos;,</div><div class="line">    paddingLeft: 20,</div><div class="line">    position: &apos;absolute&apos;,</div><div class="line">  &#125;,</div><div class="line">  itemTitle: &#123;</div><div class="line">    fontSize: 15,</div><div class="line">    color: &apos;#000&apos;,</div><div class="line">    marginLeft: 20,</div><div class="line">  &#125;,</div><div class="line">  bar: &#123;</div><div class="line">    height: 49,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#E9E9EF&apos;,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Look&apos;,() =&gt; Look);</div></pre></td></tr></table></figure>
<p>　　通过map函数，可以依次遍历每个数组元素(this.names = [‘Android’,’iOS’,’前端’,’拓展资源’,’休息视频’];)。因为需要后面能直接控制每个DOM（后面会直接操控它的样式），所以需要添加ref属性，又因为我们的item是可以拖拽移动的，能直接操控它们位置属性的就是<strong>绝对</strong>和<strong>相对</strong>布局，提供了top，left，right，bottom这些个props。</p>
<p>　　最关键的最起作用的就是<strong>position</strong>属性，一旦设置，该View的位置就不会受控于flexbox的布局了，直接浮动受控于top，left这几个参数。对于{…this._panResponder.panHandlers} 这个属性，就会谈到<a href="http://lib.csdn.net/base/react" target="_blank" rel="external">React</a>-native中的手势。</p>
<p>　　至此，很简单的一个布局完成。</p>
<h2 id="点击Item突出显示"><a href="#点击Item突出显示" class="headerlink" title="点击Item突出显示"></a>点击Item突出显示</h2><p>需要用到<code>react-native</code>中的手势，官方文档在<a href="http://reactnative.cn/docs/0.46/gesture-responder-system.html#content" target="_blank" rel="external">这里</a>和<a href="http://reactnative.cn/docs/0.46/panresponder.html#content" target="_blank" rel="external">这里</a>，一旦需要处理手势，就需要实现以下几个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">onStartShouldSetPanResponder: (evt, gestureState) =&gt; true, ／／开启手势响应  </div><div class="line">onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,  ／／开启移动手势响应  </div><div class="line">  </div><div class="line">onPanResponderGrant: (evt, gestureState) =&gt; &#123;              </div><div class="line">  // 手指触碰屏幕那一刻触发，开始手势操作，给用户一些视觉反馈，让他们知道发生了什么事情！</div><div class="line">  </div><div class="line">  // gestureState.&#123;x,y&#125; 现在会被设置为0</div><div class="line">&#125;,  </div><div class="line">onPanResponderMove: (evt, gestureState) =&gt; &#123;               </div><div class="line">  // 手指在屏幕上移动触发，最近一次的移动距离为 gestureState.move&#123;X,Y&#125;</div><div class="line">  </div><div class="line">  // 从成为响应者开始时的累计手势移动距离为 gestureState.d&#123;x,y&#125;</div><div class="line">&#125;,  </div><div class="line">onPanResponderTerminationRequest: (evt, gestureState) =&gt; true,    // 当有其他不同手势出现，响应是否中止当前的手势  </div><div class="line">onPanResponderRelease: (evt, gestureState) =&gt; &#123;           </div><div class="line">  // 手指离开屏幕触发，用户放开了所有的触摸点，且此时视图已经成为了响应者。</div><div class="line">  </div><div class="line">  // 一般来说这意味着一个手势操作已经成功完成。</div><div class="line">&#125;,  </div><div class="line">onPanResponderTerminate: (evt, gestureState) =&gt; &#123;         </div><div class="line">  // 当前手势中止触发，另一个组件已经成为了新的响应者，所以当前手势将被取消。</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>　　根据简单注释，要想实现点击Item突出显示，显然要实现一下<code>onPanResponderGrant</code>这个函数，详细解释一下代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">onPanResponderGrant: (evt, gestureState) =&gt; &#123;  </div><div class="line">  const &#123;pageY, locationY&#125; = evt.nativeEvent;   // 1  </div><div class="line">  this.index = this._getIdByPosition(pageY);    // 2  </div><div class="line">  this.preY = pageY - locationY;                // 3  </div><div class="line">  //get the taped item and highlight it  </div><div class="line">  let item = this.items[this.index];            // 4  </div><div class="line">  item.setNativeProps(&#123;                         // 5  </div><div class="line">      style: &#123;  </div><div class="line">          shadowColor: &quot;#000&quot;,                  // 6  </div><div class="line">          shadowOpacity: 0.3,                   // 6  </div><div class="line">          shadowRadius: 5,                      // 6  </div><div class="line">          shadowOffset: &#123;height: 0, width: 2&#125;,  // 6  </div><div class="line">          elevation: 5                          // 7  </div><div class="line">      &#125;  </div><div class="line">  &#125;);  </div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ol>
<li><p><code>evt</code>参数有个<code>nativeEvent</code>对象，里面包含了一系列的参数，包括点击的位置，有几个手指点击屏幕等等。<code>pageY</code>是触摸点相对于根元素的纵坐标，<code>locationY</code>触摸点相对于父元素的纵坐标，在本例中相对于<code>pageY</code>(即对应item上边框)的距离。</p>
</li>
<li><p>通过这个<code>pageY</code>，我们需要计算出这个点上是对应的哪一个Item，由于布局简单，所以写个函数来计算下。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">_getIdByPosition(pageY)&#123;  </div><div class="line">  var id = -1;  </div><div class="line">  const height = 49;  </div><div class="line">  </div><div class="line">  // 由于顶部导航栏的高度也是49，所以根据点击的Y坐标介于几个height之间，可判断出当前这个点对应哪一个Item</div><div class="line">  if(pageY &gt;= height &amp;&amp; pageY &lt; height*2)  </div><div class="line">    id = 0;  </div><div class="line">  else if(pageY &gt;= height*2 &amp;&amp; pageY &lt; height*3)  </div><div class="line">    id = 1;  </div><div class="line">  else if(pageY &gt;= height*3 &amp;&amp; pageY &lt; height*4)  </div><div class="line">    id = 2;  </div><div class="line">  else if(pageY &gt;= height*4 &amp;&amp; pageY &lt; height*5)  </div><div class="line">    id = 3;  </div><div class="line">  else if(pageY &gt;= height*5 &amp;&amp; pageY &lt; height*6)  </div><div class="line">    id = 4;  </div><div class="line"></div><div class="line">  return id;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>this.preY</code>保存了当前正在点击Item的位置，为了以后移动Item。</li>
<li>有了<code>this.index</code>，我们就可以获取到点击的是哪一个Item。</li>
<li>这一步是直接修改DOM属性，将其突出显示，关于<code>setNativeProps</code>可以参考<a href="http://reactnative.cn/docs/0.46/direct-manipulation.html#content" target="_blank" rel="external">这里</a></li>
<li>ios中的阴影属性，可以参考<a href="http://reactnative.cn/docs/0.46/shadow-props.html#content" target="_blank" rel="external">这里</a></li>
<li>Android中的阴影属性</li>
</ol>
<h2 id="Item可移动"><a href="#Item可移动" class="headerlink" title="Item可移动"></a>Item可移动</h2><p>　　这一步应该也可以想到需要在<code>onPanResponderMove</code>里操作，让其移动就是不断的将<code>evt.nativeEvent</code>中位置信息去赋值给item的<code>top</code>属性，这个比较简单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">onPanResponderMove: (evt, gestureState) =&gt; &#123;  </div><div class="line">  // 用之前保存的preY和累计纵向移动dy,计算top</div><div class="line">  let top = this.preY + gestureState.dy;  </div><div class="line">  let item = this.items[this.index];  </div><div class="line">  // 计算后直接修改样式</div><div class="line">  item.setNativeProps(&#123;  </div><div class="line">      style: &#123;top: top&#125;  </div><div class="line">  &#125;);  </div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="可交换的Item"><a href="#可交换的Item" class="headerlink" title="可交换的Item"></a>可交换的Item</h2><p>　　这部分是最核心的，思路如下：当我们点击某个item并且开始移动它的时候，我们还需要计算下，当前这个手指移动到的位置有没有进入别的Item范围，如果有，OK，我们将进入到的那个item位置放到我们手上拿着的这个item的位置。因为有了之前的函数——通过位置计算id，我们可以很快的求出是否这个位置返回的id和我们手上这个item的id一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">onPanResponderMove: (evt, gestureState) =&gt; &#123;</div><div class="line">  // 移动代码不变</div><div class="line">  let top = this.preY + gestureState.dy;</div><div class="line">  let item = this.items[this.index];</div><div class="line">  item.setNativeProps(&#123;</div><div class="line">    style: &#123;top: top&#125;</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  // 以下是交换部分</div><div class="line">  // 计算当前位置item的id</div><div class="line">  let collideIndex = this._getIdByPosition(evt.nativeEvent.pageY);</div><div class="line">  // 如果当前位置item的id和点击的item的id不一致，且当前位置id不为-1(即有item)</div><div class="line">  if(collideIndex !== this.index &amp;&amp; collideIndex !== -1) &#123;</div><div class="line">    // 保存当前位置的item</div><div class="line">    let collideItem = this.items[collideIndex];</div><div class="line">    // 当前位置item将top改为点击的item的top</div><div class="line">    collideItem.setNativeProps(&#123;</div><div class="line">      style: &#123;top: this._getTopValueYById(this.index)&#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    //swap two values 交换(原来还可以这样交换，长见识了)</div><div class="line">    // 交换item</div><div class="line">    [this.items[this.index], this.items[collideIndex]] = [this.items[collideIndex], this.items[this.index]];</div><div class="line">    // 交换order数组保存的顺序(即id)</div><div class="line">    [this.order[this.index], this.order[collideIndex]] = [this.order[collideIndex], this.order[this.index]];</div><div class="line">	// 当前id改变</div><div class="line">    this.index = collideIndex;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"></div><div class="line">// 根据id计算位置，即上边框的top值</div><div class="line">_getTopValueYById(id)&#123;</div><div class="line">  const height = 49;</div><div class="line">  // 由于导航栏height也是49，所以第一个item(即id为0)的上边框在1*49，以此类推</div><div class="line">  return (id + 1) * height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="抬起手指恢复正确位置"><a href="#抬起手指恢复正确位置" class="headerlink" title="抬起手指恢复正确位置"></a>抬起手指恢复正确位置</h2><p>　　抬起手指时，需要做两件事：</p>
<ul>
<li>将手上拿起的item的属性恢复原样</li>
<li>将其摆到正确的位置上</li>
</ul>
<p>　　第一个很简单，直接使用<code>setNativeProps</code>设置属性即可；第二个也简单，因为我们在移动和交换过程中，始终保持id对应正确的item，所以我们只要有了id就可以计算出正确的位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">onPanResponderRelease: (evt, gestureState) =&gt; &#123;</div><div class="line">  // 将阴影去掉</div><div class="line">  const shadowStyle = &#123;</div><div class="line">    shadowColor: &quot;#000&quot;,</div><div class="line">    shadowOpacity: 0,</div><div class="line">    shadowRadius: 0,</div><div class="line">    shadowOffset: &#123;height: 0, width: 0,&#125;,</div><div class="line">    elevation: 0</div><div class="line">  &#125;;</div><div class="line">  let item = this.items[this.index];</div><div class="line">  //go back the correct position，设置正确属性</div><div class="line">  item.setNativeProps(&#123;</div><div class="line">    style: &#123;...shadowStyle, top: this._getTopValueYById(this.index)&#125;</div><div class="line">  &#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="Anything-Else-Finish-it"><a href="#Anything-Else-Finish-it" class="headerlink" title="Anything Else ? Finish it ?"></a>Anything Else ? Finish it ?</h2><p>　　咱们的数据结构呢？这个只是界面作出了改动了，我们的数据还需要做出相应的变化，这里简单起见，我在构造函数中，添加了this.order=[ ]，当开始map时，我们就将各个item的名字push进去，所以这个数组的顺序就代表着这个list的顺序。</p>
<p>　　OK，大功告成！</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>　　现在是实现了item的交换，但现在是只要碰到item就可以交换，这体验就很不好，正常情况下，用户在点击条目左端的排序按钮时，才会调用排序功能，那要如何实现呢？</p>
<p>　　以下优化为个人观点，如有误或有不足，欢迎指正。</p>
<p>　　最开始想到的办法是，给刚才的<code>_getIdByPosition</code>函数添加一个<code>pageX</code>参数，界限范围根据情况自行设定,，然后在之前调用此函数的地方也添加对应参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">_getIdByPosition(pageY,pageX)&#123;</div><div class="line">  // ......</div><div class="line">  if( pageX &gt;= 17 &amp;&amp; pageX &lt;= 43 )&#123;</div><div class="line">  // ......</div><div class="line">  &#125;</div><div class="line">  return id;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　这样修改后确实可以做到点击图标进行排序，但当点击非图标区域后，执行<code>item.setNativeProps</code>时报错，即数组下标越界。</p>
<p>　　琢磨一下原因，因为我们在<code>View</code>大视图中调用了<code>{...this._panResponder.panHandlers}</code>，所以之前只用<code>pageY</code>时，点击<code>View</code>视图的任意地方，对应的<code>pageY</code>经过计算总能得出一个正确的id值(即不是-1)。所以如果我们直接加上<code>pageX</code>，那么有很多地方<code>id</code>会返回-1，就会出错。</p>
<p>　　解决方案：</p>
<p>　　<code>_getIdByPosition</code>函数不增加参数，保持原来不变。在两个手势响应函数里做少量修改。有以下要点：</p>
<ul>
<li>函数不修改，保证只要点在item区域，就可以返回对应<code>id</code>，若将图标以外区域返回-1，会出现下标越界问题</li>
<li><code>onPanResponderMove</code>函数中要获取<code>gestureState.x0</code>，即当响应器产生时的屏幕坐标，如果直接以<code>pageX</code>作为判断依据，那么当移动过程中手指滑动到图标以外区域，会出现无法继续拖动的情况。换句话说，<code>gestureState.x0</code>表示最开始点到的屏幕坐标，在你手势松开之前一直不会变，而<code>evt.nativeEvent.pageX</code>表示当前手指移动到的屏幕左边，会变化，所以会出问题。</li>
<li><code>onPanResponderRelease</code>不做修改，不设<code>if</code>，否则移动过程中手指移到图标以外区域，则松手后悬停，不恢复，原因与上面类似。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">onPanResponderGrant: (evt, gestureState) =&gt; &#123;</div><div class="line">  const &#123;pageY, locationY, pageX&#125; = evt.nativeEvent;</div><div class="line">  this.index = this._getIdByPosition(pageY);</div><div class="line">  this.preY = pageY1 - locationY;</div><div class="line">  let item = this.items[this.index];</div><div class="line">  // 在此增加if条件，注意，一定要在 let item = this.items[this.index] 之后</div><div class="line">  if(pageX &gt;= 17 &amp;&amp; pageX &lt;= 43)&#123;</div><div class="line">    item.setNativeProps(&#123;</div><div class="line">      style: &#123;</div><div class="line">        elevation: 5</div><div class="line">      &#125;</div><div class="line">     &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"></div><div class="line">onPanResponderMove: (evt, gestureState) =&gt; &#123;</div><div class="line">  let x = gestureState.x0;</div><div class="line">  if (x &gt;= 17 &amp;&amp; x &lt;= 43)&#123;</div><div class="line">    // ......</div><div class="line">    // 还是原来的操作</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  StyleSheet,</div><div class="line">  Dimensions,</div><div class="line">  PanResponder,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</div><div class="line">const width = Dimensions.get(&apos;window&apos;).width;</div><div class="line"></div><div class="line">export default class Look extends Component&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  constructor(props)&#123;</div><div class="line">    super(props);</div><div class="line">    this.names = [&apos;Android&apos;,&apos;iOS&apos;,&apos;前端&apos;,&apos;拓展资源&apos;,&apos;休息视频&apos;];</div><div class="line">    this.items = [];</div><div class="line">    this.order = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    return(</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;View style=&#123;styles.bar&#125;&gt;</div><div class="line">          &lt;Text&gt;导航&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">        &#123;this.names.map((item, i)=&gt;&#123;</div><div class="line">          this.order.push(item);</div><div class="line">          return (</div><div class="line">            &lt;View</div><div class="line">              &#123;...this._panResponder.panHandlers&#125;</div><div class="line">              ref=&#123;(ref) =&gt; this.items[i] = ref&#125;</div><div class="line">              key=&#123;i&#125;</div><div class="line">              style=&#123;[styles.item, &#123;top: (i+1)*49&#125;]&#125;&gt;</div><div class="line">              &lt;Icon name=&quot;bars&quot; size=&#123;25&#125; color=&quot;#ccc&quot;/&gt;</div><div class="line">              &lt;Text style=&#123;styles.itemTitle&#125;&gt;&#123;item&#125;&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">          );</div><div class="line">        &#125;)&#125;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillMount() &#123;</div><div class="line">    this._panResponder = PanResponder.create(&#123;</div><div class="line"></div><div class="line">      onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,</div><div class="line"></div><div class="line">      onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,</div><div class="line"></div><div class="line">      onPanResponderGrant: (evt, gestureState) =&gt; &#123;</div><div class="line">        const &#123;pageY, locationY&#125; = evt.nativeEvent;</div><div class="line">        this.index = this._getIdByPosition(pageY);</div><div class="line">        this.preY = pageY - locationY;</div><div class="line">        //get the taped item and highlight it</div><div class="line">        let item = this.items[this.index];</div><div class="line">        item.setNativeProps(&#123;</div><div class="line">          style: &#123;</div><div class="line">            // shadowColor: &quot;#000&quot;,</div><div class="line">            // shadowOpacity: 0.3,</div><div class="line">            // shadowRadius: 5,</div><div class="line">            // shadowOffset: &#123;height: 0, width: 2&#125;,</div><div class="line">            elevation: 5</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      onPanResponderMove: (evt, gestureState) =&gt; &#123;</div><div class="line">        let top = this.preY + gestureState.dy;</div><div class="line">        let item = this.items[this.index];</div><div class="line">        item.setNativeProps(&#123;</div><div class="line">          style: &#123;top: top&#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        let collideIndex = this._getIdByPosition(evt.nativeEvent.pageY);</div><div class="line">        if(collideIndex !== this.index &amp;&amp; collideIndex !== -1) &#123;</div><div class="line">          let collideItem = this.items[collideIndex];</div><div class="line">          collideItem.setNativeProps(&#123;</div><div class="line">            style: &#123;top: this._getTopValueYById(this.index)&#125;</div><div class="line">          &#125;);</div><div class="line">          //swap two values</div><div class="line">          [this.items[this.index], this.items[collideIndex]] = [this.items[collideIndex], this.items[this.index]];</div><div class="line">          [this.order[this.index], this.order[collideIndex]] = [this.order[collideIndex], this.order[this.index]];</div><div class="line">          this.index = collideIndex;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      onPanResponderTerminationRequest: (evt, gestureState) =&gt; true,</div><div class="line"></div><div class="line">      onPanResponderRelease: (evt, gestureState) =&gt; &#123;</div><div class="line">        const shadowStyle = &#123;</div><div class="line">          shadowColor: &quot;#000&quot;,</div><div class="line">          shadowOpacity: 0,</div><div class="line">          shadowRadius: 0,</div><div class="line">          shadowOffset: &#123;height: 0, width: 0,&#125;,</div><div class="line">          elevation: 0</div><div class="line">        &#125;;</div><div class="line">        let item = this.items[this.index];</div><div class="line">        //go back the correct position</div><div class="line">        item.setNativeProps(&#123;</div><div class="line">          style: &#123;...shadowStyle, top: this._getTopValueYById(this.index)&#125;</div><div class="line">        &#125;);</div><div class="line">        console.log(this.order);</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      onPanResponderTerminate: (evt, gestureState) =&gt; &#123;</div><div class="line">        // Another component has become the responder, so this gesture</div><div class="line">        // should be cancelled</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _getIdByPosition(pageY)&#123;</div><div class="line">    var id = -1;</div><div class="line">    const height = 49;</div><div class="line"></div><div class="line">    // 由于顶部导航栏的高度也是49，所以根据点击的Y坐标介于几个height之间，可判断出当前这个点对应哪一个Item</div><div class="line">    if(pageY &gt;= height &amp;&amp; pageY &lt; height*2)</div><div class="line">      id = 0;</div><div class="line">    else if(pageY &gt;= height*2 &amp;&amp; pageY &lt; height*3)</div><div class="line">      id = 1;</div><div class="line">    else if(pageY &gt;= height*3 &amp;&amp; pageY &lt; height*4)</div><div class="line">      id = 2;</div><div class="line">    else if(pageY &gt;= height*4 &amp;&amp; pageY &lt; height*5)</div><div class="line">      id = 3;</div><div class="line">    else if(pageY &gt;= height*5 &amp;&amp; pageY &lt; height*6)</div><div class="line">      id = 4;</div><div class="line"></div><div class="line">    return id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _getTopValueYById(id)&#123;</div><div class="line">    const height = 49;</div><div class="line">    return (id + 1) * height;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">  &#125;,</div><div class="line">  item: &#123;</div><div class="line">    flexDirection: &apos;row&apos;,</div><div class="line">    height: 49,</div><div class="line">    width: width,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#fff&apos;,</div><div class="line">    paddingLeft: 20,</div><div class="line">    position: &apos;absolute&apos;,</div><div class="line">  &#125;,</div><div class="line">  itemTitle: &#123;</div><div class="line">    fontSize: 15,</div><div class="line">    color: &apos;#000&apos;,</div><div class="line">    marginLeft: 20,</div><div class="line">  &#125;,</div><div class="line">  bar: &#123;</div><div class="line">    height: 49,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#E9E9EF&apos;,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;Look&apos;,() =&gt; Look);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React-Navigation 使用方法]]></title>
      <url>http://hzmyj.github.io/2017/07/11/React-Navigation%20%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>总结一下react-navigation的使用和心得。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　新做一个项目，第一次接触<code>react-native</code>，界面主要涉及轮播，tab-view，抽屉，导航等等。在官方文档中看到了<code>Navigator</code>的存在，虽然上面说已被<code>react-navigation</code>替代，但仅仅以为是个单纯的页面跳转组件，想着先把主页做的差不多了，回头学一下这个，加上跳转即可。于是乎找了n多的第三方组件…比如<code>react-native-banner</code>，<code>react-native-swiper</code>，<code>react-native-drawer-layout</code>，<code>react-native-scrollable-tab-view</code>，<code>react-native-side-menu</code>，<code>react-native-tab-view</code>等等。。而且有的第三方组件还不是特别好用，或者两者之间兼容不太好，又因为刚学RN，自己动手封装组件有技术困难 = =</p>
<p>　　然后就回头看了一下<code>react-navigation</code>，发现这货包含了上面好多功能，什么tab-view，页面跳转，抽屉视图等等，得，学一下，代码翻新好了。</p>
<h2 id="react-navigation是什么"><a href="#react-navigation是什么" class="headerlink" title="react-navigation是什么"></a>react-navigation是什么</h2><p>　　navigation，即主要用来实现页面跳转，现在App基本不存在单页，所以Navigation的使用越来越多。而react-native开源以来，其原有的Navigation组件一直存在让人头痛的问题，即导航跳转不流畅。终于FB坐不住了，重新做了一个react-navigation并大力推广，且从RN0.43版本开始，<strong>官方将停止维护Navigator</strong>，建议开发者们迁移到新的<a href="https://reactnavigation.org/" target="_blank" rel="external">react-navigation</a>库(文档地址可能需要翻墙)。</p>
<p>新的<code>react-navigation</code>致力于解决导航卡顿，数据传递，Tabbar和navigator布局，支持<code>redux</code>。虽然现在功能还不完善，但无论从性能还是易用性上都要大大好于老的Navigator，还是很有必要学习和使用(不用也没什么办法，与其找第三方库，还不如…)</p>
<h2 id="react-navigation基本使用"><a href="#react-navigation基本使用" class="headerlink" title="react-navigation基本使用"></a>react-navigation基本使用</h2><p>react-navigation主要包括三类组件</p>
<ol>
<li><p>StackNavigator：用来跳转页面和传递参数</p>
</li>
<li><p>TabNavigator：类似底部导航栏，用来在同一屏幕下切换不同界面</p>
</li>
<li><p>DrawerNavigator：侧滑菜单导航栏，用于轻松设置带抽屉导航的屏幕</p>
</li>
</ol>
<h3 id="StackNavigator基本用法-amp-amp-属性介绍"><a href="#StackNavigator基本用法-amp-amp-属性介绍" class="headerlink" title="StackNavigator基本用法 &amp;&amp; 属性介绍"></a>StackNavigator基本用法 &amp;&amp; 属性介绍</h3><p>Simple  Example</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const MyApp = StackNavigator(&#123;</div><div class="line">    MyTab: &#123;</div><div class="line">        screen: MyTab,</div><div class="line">    &#125;,</div><div class="line">    Detail: &#123;</div><div class="line">        screen: Detail,</div><div class="line">        navigationOptions:&#123;</div><div class="line">            headerTitle:&apos;详情&apos;,</div><div class="line">            headerBackTitle:null,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">    headerMode: &apos;screen&apos;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="导航配置"><a href="#导航配置" class="headerlink" title="导航配置"></a>导航配置</h4><p><code>screen</code>：对应界面名称，即被<code>import</code>的页面，<code>screen</code>前面为自定义的页面名称，为方便一般设成与后面相同。</p>
<p><code>navigationOptions</code>：配置StackNavigator的一些属性。</p>
<ul>
<li><code>title</code>：标题，如果在此设置，导航栏和标签栏(如果有标签栏的话)的title会变成一样，不推荐。</li>
<li><code>headerTitle</code>：设置导航栏标题，推荐使用这种方法。</li>
<li><code>header</code>：设置导航属性，可以使用<code>header: (......)</code>来自定义整个导航样式，或设为<code>null</code>隐藏导航栏。</li>
<li><code>headerBackTitle</code>：设置导航栏左侧返回箭头后面的文字，默认上一个页面的标题，可自定义，也可以设为<code>null</code>。</li>
<li><code>headerRight</code>：设置导航栏右侧，用法类似<code>header</code>。</li>
<li><code>headerLeft</code>：设置导航栏左侧，用法类似<code>header</code>。</li>
<li><code>headerStyle</code>：设置导航栏样式，宽高颜色等，可分别用<code>elevation: 0</code>和<code>shadowOpacity:0</code>去除安卓/IOS导航栏底部的阴影。</li>
<li><code>headerTitleStyle</code>：设置导航条文字样式。安卓上如果要设置文字居中，只要调价<code>alignSelf:&#39;center&#39;</code>即可。</li>
</ul>
<h4 id="导航视觉效果"><a href="#导航视觉效果" class="headerlink" title="导航视觉效果"></a>导航视觉效果</h4><p><code>mode</code>：定义跳转风格</p>
<ul>
<li><code>card</code>：使用iOS和安卓默认的风格。</li>
<li><code>modal</code>：iOS独有的使屏幕从底部画出。类似iOS的present效果</li>
</ul>
<p><code>headerMode</code>：边缘滑动返回上级页面时动画效果。</p>
<ul>
<li><code>float</code>：iOS默认的效果，可以看到一个明显的过渡动画。</li>
<li><code>screen</code>：滑动过程中，整个页面都会返回。</li>
<li><code>none</code>：没有动画。</li>
</ul>
<p><code>cardStyle</code>：自定义设置跳转效果。</p>
<h3 id="TabNavigator-基本用法-amp-amp-属性介绍"><a href="#TabNavigator-基本用法-amp-amp-属性介绍" class="headerlink" title="TabNavigator 基本用法 &amp;&amp; 属性介绍"></a>TabNavigator 基本用法 &amp;&amp; 属性介绍</h3><p>Simple Example</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">class MyHomeScreen extends React.Component &#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBarLabel: &apos;Home&apos;,</div><div class="line">    tabBarIcon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">      &lt;Image</div><div class="line">        source=&#123;require(&apos;./chats-icon.png&apos;)&#125;</div><div class="line">        style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">      /&gt;</div><div class="line">    ),</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Button</div><div class="line">        onPress=&#123;() =&gt; this.props.navigation.navigate(&apos;Notifications&apos;)&#125;</div><div class="line">        title=&quot;Go to notifications&quot;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyNotificationsScreen extends React.Component &#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBarLabel: &apos;Notifications&apos;,</div><div class="line">    tabBarIcon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">      &lt;Image</div><div class="line">        source=&#123;require(&apos;./notif-icon.png&apos;)&#125;</div><div class="line">        style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">      /&gt;</div><div class="line">    ),</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Button</div><div class="line">        onPress=&#123;() =&gt; this.props.navigation.goBack()&#125;</div><div class="line">        title=&quot;Go back home&quot;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  icon: &#123;</div><div class="line">    width: 26,</div><div class="line">    height: 26,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const MyApp = TabNavigator(&#123;</div><div class="line">  Home: &#123;</div><div class="line">    screen: MyHomeScreen,</div><div class="line">    navigationOptions:&#123;</div><div class="line">      tabBarLable: &apos;标签Title&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  Notifications: &#123;</div><div class="line">    screen: MyNotificationsScreen,</div><div class="line">  &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  tabBarPosition: &apos;bottom&apos;,</div><div class="line">  tabBarOptions: &#123;</div><div class="line">    activeTintColor: &apos;#e91e63&apos;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="导航配置-1"><a href="#导航配置-1" class="headerlink" title="导航配置"></a>导航配置</h4><p><code>screen</code>：和<code>StackNavigator</code>的一样的，对应界面名称，可以在其他页面通过这个screen传值和跳转。</p>
<p><code>navigationOptions</code>：配置TabNavigator的一些属性</p>
<ul>
<li><p><code>title</code>：标题，会同时设置导航条和标签栏的title，还是不推荐这种方式。</p>
</li>
<li><p><code>tabBarVisible</code>：是否隐藏标签栏。默认不隐藏(true)</p>
</li>
<li><p><code>tabBarIcon</code>：设置标签栏的图标。需要给每个都设置。</p>
</li>
<li><p><code>tabBarLabel</code>：设置标签栏的title。推荐这个方式。</p>
<p>其余基本也与<code>StackNavigator</code>相同。</p>
</li>
</ul>
<h4 id="标签栏配置"><a href="#标签栏配置" class="headerlink" title="标签栏配置"></a>标签栏配置</h4><p><code>tabBarPosition</code>：设置tabbar的位置，iOS默认在底部，安卓默认在顶部。（属性值：<code>top</code>，<code>bottom</code>）</p>
<p><code>swipeEnabled</code>：是否允许在标签之间进行滑动(大标签页的滑动切换)。</p>
<p><code>animationEnabled</code>：点击标签切换时，是否显示动画(即左右滑动切换效果)</p>
<p><code>lazy</code>：是否根据需要懒惰呈现标签，而不是提前制作，意思是在app打开的时候将底部标签栏全部加载，默认<code>false</code>,推荐改成<code>true</code>哦。</p>
<p><code>backBehavior</code>：按 back 键是否跳转到第一个Tab(首页)， <code>none</code> 为不跳转。</p>
<p><code>tabBarOptions</code>：配置标签栏的一些属性(这里只列举Android的常用属性)</p>
<ul>
<li><code>activeTintColor</code>：label和icon的前景色 活跃状态下（选中） 。</li>
<li><code>inactiveTintColor</code>：label和icon的前景色 不活跃状态下(未选中)。</li>
<li><code>showIcon</code>：是否显示图标，默认关闭。</li>
<li><code>showLabel</code>：是否显示label，默认开启。</li>
<li><code>style</code>：tabbar的样式。</li>
<li><code>labelStyle</code>：label的样式。</li>
<li><code>upperCaseLabel</code>：是否使标签大写，默认为true。</li>
<li><code>pressColor</code>：material涟漪效果的颜色（安卓版本需要大于5.0）</li>
<li><code>pressOpacity</code>：按压标签的透明度变化（安卓版本需要小于5.0）。</li>
<li><code>scrollEnabled</code>：是否启用可滚动选项卡。</li>
<li><code>tabStyle</code>：tab的样式。</li>
<li><code>indicatorStyle</code>：标签指示器的样式对象（选项卡底部的行）。安卓底部会多出一条线，可以将<code>height</code>设置为0来暂时解决这个问题。</li>
<li><code>labelStyle</code>：label的样式。</li>
<li><code>iconStyle</code>：图标的样式。</li>
</ul>
<h4 id="另一种配置方式"><a href="#另一种配置方式" class="headerlink" title="另一种配置方式"></a>另一种配置方式</h4><p>通过以下代码配置当前页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static navigationOptions = (&#123;navigation,screenProps&#125;) =&gt; (&#123;</div><div class="line">  header: null,</div><div class="line">  tabBarLabel: &apos;Notifications&apos;,</div><div class="line">  // ......</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">navigate(&apos;Detail&apos;,&#123;</div><div class="line">                   title:&apos;图片详情&apos;,</div><div class="line">                   url:item.url,</div><div class="line">                   &#125;);</div></pre></td></tr></table></figure>
<p><code>Detail</code>：在<code>StackNavigator</code>中注册的页面，需要一一对应，才能跳转到相应的页面<br><code>title</code>：在跳转的页面可以通过<code>this.props.navigation.state.params.title</code>获取到这个参数。参数名字可以随便填写，都可以通过<code>this.props.navigation.state.params.xxx</code>获取。</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="react-navigation和react-native-swpier无法共用"><a href="#react-navigation和react-native-swpier无法共用" class="headerlink" title="react-navigation和react-native-swpier无法共用"></a>react-navigation和react-native-swpier无法共用</h3><p>　　React Native有一个第三方的组件可以实现轮播功能，即<code>react-native-swiper</code>。但是在进行Android开发时，如果同时使用了<code>react-navigation</code>的<code>TabNavigator</code>导航，会出现轮播点以及左右按钮可以显示，但图片内容不显示的问题(图片占位置，轮播组件也可以正常使用，即手动/自动播放，但图片区域无内容)。</p>
<p>　　发现，如果用到了可滚动组件例如SectionList,ScrollView或者TabNavigator这种可滑动的组建，swiper都无法正确显示，解决办法是设置setTimeout。</p>
<p>　　这里贴上<a href="http://blog.csdn.net/qq_31280709/article/details/73441330" target="_blank" rel="external">原文链接</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">export defalt class XXX from Component&#123;</div><div class="line">  state: &#123;</div><div class="line">  swiperShow: false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">  componentDidMount()&#123;</div><div class="line">    setTimeout(()=&gt;&#123;</div><div class="line">      this.setState(&#123;</div><div class="line">        swiperShow:true</div><div class="line">      &#125;);</div><div class="line">    &#125;,0)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  render()&#123;</div><div class="line">    if(state.swiperShow)&#123;</div><div class="line">      return(</div><div class="line">      	.....</div><div class="line">      	// 返回轮播</div><div class="line">      )</div><div class="line">    &#125;else&#123;</div><div class="line">      return(</div><div class="line">      	&lt;View&gt;</div><div class="line">      	  &lt;Image /&gt;</div><div class="line">      	  // 仅返回一张图片</div><div class="line">      	&lt;/View&gt;</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　原理很清楚，在<code>render</code>的时候判断<code>swiperShow</code>，先不加载轮播，等<code>setTimeout</code>执行后改变了状态，轮播才被渲染，即可正常显示。</p>
<h3 id="关于快速点击多次导致开启多个重复页面"><a href="#关于快速点击多次导致开启多个重复页面" class="headerlink" title="关于快速点击多次导致开启多个重复页面"></a>关于快速点击多次导致开启多个重复页面</h3><p>　　有一个不好的体验是，当我们快速点击一个跳转按钮多次时，会打开多个重复界面，这就很蛋疼。其实<a href="https://github.com/react-community/react-navigation/pull/1348/files" target="_blank" rel="external">官方文档</a>中也有说明，找到项目文件夹下的<code>node_modules/react-navigation/src/addNavigationHelpers.js</code>文件，替换如下内容到<code>export default</code>块中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">export default function&lt;S: *&gt;(navigation: NavigationProp&lt;S, NavigationAction&gt;) &#123;  </div><div class="line">  // 添加点击判断  </div><div class="line">  let debounce = true;  </div><div class="line">  return &#123;  </div><div class="line">    ...navigation,  </div><div class="line">    goBack: (key?: ?string): boolean =&gt;  </div><div class="line">      navigation.dispatch(  </div><div class="line">        NavigationActions.back(&#123;  </div><div class="line">          key: key === undefined ? navigation.state.key : key,  </div><div class="line">        &#125;),  </div><div class="line">      ),  </div><div class="line">      navigate: (</div><div class="line">        routeName: string,  </div><div class="line">        params?: NavigationParams,  </div><div class="line">        action?: NavigationAction,): boolean =&gt; &#123;  </div><div class="line">          if (debounce) &#123;  </div><div class="line">            debounce = false;  </div><div class="line">            navigation.dispatch(  </div><div class="line">              NavigationActions.navigate(&#123;  </div><div class="line">                routeName,  </div><div class="line">                params,  </div><div class="line">                action,  </div><div class="line">              &#125;),  </div><div class="line">            );  </div><div class="line">            setTimeout(  </div><div class="line">              () =&gt; &#123;  </div><div class="line">                debounce = true;  </div><div class="line">              &#125;,  </div><div class="line">              500,  </div><div class="line">            );  </div><div class="line">            return true;  </div><div class="line">          &#125;  </div><div class="line">          return false;  </div><div class="line">        &#125;,  </div><div class="line">    /** </div><div class="line">     * For updating current route params. For example the nav bar title and </div><div class="line">     * buttons are based on the route params. </div><div class="line">     * This means `setParams` can be used to update nav bar for example. </div><div class="line">     */  </div><div class="line">    setParams: (params: NavigationParams): boolean =&gt;  </div><div class="line">      navigation.dispatch(  </div><div class="line">        NavigationActions.setParams(&#123;  </div><div class="line">          params,  </div><div class="line">          key: navigation.state.key,  </div><div class="line">        &#125;),  </div><div class="line">      ),  </div><div class="line">  &#125;;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　原理也比较简单，设置一个状态<code>debounce</code>，初值为<code>true</code>，每次跳转前判断<code>debounce</code>，若为<code>true</code>则可跳转。在跳转时将<code>debounce</code>的值改为<code>false</code>，实现快速点击不会重复跳转。最后用<code>setTimeout</code>函数，在一段时间后将<code>debounce</code>再改为<code>true</code>，又可跳转。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React Native 笔记]]></title>
      <url>http://hzmyj.github.io/2017/07/10/React-Native%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>　　<strong>声明，主要为自用笔记，记录一些常见又略坑的东西，复杂的会另开篇幅单写。不定时更新</strong></p>
<a id="more"></a>
<h4 id="文字垂直居中"><a href="#文字垂直居中" class="headerlink" title="文字垂直居中"></a>文字垂直居中</h4><p>在<code>&lt;Text&gt;&lt;/Text&gt;</code>标签外面套一层<code>&lt;View&gt;</code>标签，在<code>&lt;View&gt;</code>中设样式<code>alignItems: &#39;center&#39;</code>、<code>justifyContent: &#39;center&#39;</code>即可。</p>
<h4 id="默认颜色"><a href="#默认颜色" class="headerlink" title="默认颜色"></a>默认颜色</h4><p>有时候真的需要知道<code>react-native</code>的那个默认背景色是什么，对，就是那个灰不拉几的颜色，可以直接用QQ的截图工具，鼠标移过去即可。</p>
<p>颜色为<code>RGB: (233,233,239)</code>或<code>RGB: #E9E9EF</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python-爬虫-获取教务处成绩]]></title>
      <url>http://hzmyj.github.io/2017/02/01/Python-%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p>　　尝试使用Python编写程序爬取教务处网站上的详细成绩单，并计算GPA。</p>
<a id="more"></a>
<h1 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h1><ul>
<li>pycharm  </li>
<li>anaconda2 / Python2.7</li>
<li>phantomJS</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>pycharm是推荐使用的python的IDE，安装即可</li>
<li>anconda2是 Python 科学技术包的合集，有自己的包管理工具 conda，同时支持pip工具，自带了很多常用的python的库，特别是一些很难安装的库。安装过程中，添加python到环境变量中去。</li>
<li>python2.7 是官方下载的python安装包，如果不想使用anaconda2，就安装这个，但装完之后，需要用pip去安装python库。添加python到环境变量中去。注意，如果安装了anaconda2就不用装这个，二选一。</li>
<li>phantomJS 是一个无界面浏览器，作为爬虫的工具使用。无需安装，解压即可。</li>
</ul>
<h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><p>如果你选择anaconda，只需安装selenium库：命令行输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install selenium</div></pre></td></tr></table></figure></p>
<p>如果选择官方python，所有使用到的库都要安装，也是使用pip安装，安装BeautifulSoup：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install bs4</div></pre></td></tr></table></figure></p>
<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><p>　　<strong>编写步骤主要可分为四个模块：模拟登陆、获取并打印网页源代码、提取需要的元素、写入excel表格并计算</strong></p>
<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>　　类似C/C++中的头文件一样，把需要的库导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"><span class="keyword">import</span> xlwt</div></pre></td></tr></table></figure></p>
<h2 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h2><p>　　定义函数 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_code</span><span class="params">(direction)</span>:</span></div></pre></td></tr></table></figure></p>
<p><strong>注：以下代码在函数receive_code(direction)下</strong></p>
<h3 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 网站链接</span></div><div class="line">URL = <span class="string">'http://sso.jwc.whut.edu.cn/Certification//toIndex.do'</span></div><div class="line"><span class="comment"># 浏览器路径</span></div><div class="line">phantomjs_path=<span class="string">'E:/phantomjs-2.1.1-windows/bin/phantomjs.exe'</span></div><div class="line">driver = webdriver.PhantomJS(phantomjs_path)</div><div class="line"><span class="comment"># 设置最大等待时间</span></div><div class="line">driver.implicitly_wait(<span class="number">5</span>)</div><div class="line"><span class="comment"># 打开网页</span></div><div class="line">driver.get(URL)</div></pre></td></tr></table></figure>
<p>　　可设置浏览器最大等待时间，代码为<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.implicitly_wait(time)</div></pre></td></tr></table></figure></p>
<h3 id="登陆网页"><a href="#登陆网页" class="headerlink" title="登陆网页"></a>登陆网页</h3><p>　　可通过以下方法定位元素（<strong>在网页源代码中</strong>）<br>定位单个元素<br>find_element_by_id<br>find_element_by_name<br>find_element_by_xpath<br>find_element_by_link_text<br>find_element_by_partial_link_text<br>find_element_by_tag_name<br>find_element_by_class_name<br>find_element_by_css_selector</p>
<p>定位多个元素<br>find_elements_by_name<br>find_elements_by_xpath<br>find_elements_by_link_text<br>find_elements_by_partial_link_text<br>find_elements_by_tag_name<br>find_elements_by_class_name<br>find_elements_by_css_selector<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 通过 name 找到用户名和密码（需要查看网页源代码，后面同）</span></div><div class="line">userName_tag = driver.find_element_by_name(<span class="string">'userName'</span>)</div><div class="line">password_tag = driver.find_element_by_name(<span class="string">'password'</span>)</div><div class="line"><span class="comment"># 模拟登陆，输入学号和密码（要正确的！这不是胡乱填的）</span></div><div class="line">userName_tag.send_keys(<span class="string">'0121510880318'</span>)</div><div class="line">password_tag.send_keys(<span class="string">'xxxxxx'</span>)</div><div class="line">driver.find_element_by_id(<span class="string">'imageField'</span>).submit()</div><div class="line">driver.find_element_by_link_text(<span class="string">'成绩查询'</span>).click()</div><div class="line">driver.find_element_by_link_text(<span class="string">'历史成绩查询'</span>).click()</div><div class="line">select_tag = driver.find_element_by_id(<span class="string">'lscj_xnxq'</span>)</div><div class="line">xnxq_list = [<span class="string">'2015-2016-1'</span>,<span class="string">'2015-2016-2'</span>]</div></pre></td></tr></table></figure></p>
<p>　　至此模拟进入”历史成绩查询界面”</p>
<h2 id="打印网页源代码"><a href="#打印网页源代码" class="headerlink" title="打印网页源代码"></a>打印网页源代码</h2><h3 id="获取HTML代码"><a href="#获取HTML代码" class="headerlink" title="获取HTML代码"></a>获取HTML代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> xnxq <span class="keyword">in</span> xnxq_list:</div><div class="line">    <span class="comment"># 点击学年学期</span></div><div class="line">    select_tag.find_element_by_xpath(<span class="string">"//option[@value='&#123;0&#125;']"</span>.format(xnxq)).click()</div><div class="line">    <span class="comment"># 获取 body 中的文本值</span></div><div class="line">    body_str=driver.find_element_by_tag_name(<span class="string">'body'</span>).get_attribute(<span class="string">'innerHTML'</span>)</div></pre></td></tr></table></figure>
<h3 id="打印到txt文档里"><a href="#打印到txt文档里" class="headerlink" title="打印到txt文档里"></a>打印到txt文档里</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">soup=BeautifulSoup(body_str, <span class="string">'lxml'</span>)</div><div class="line">    <span class="keyword">with</span> open(os.path.join(direction,  xnxq+<span class="string">'.txt'</span>),<span class="string">'w'</span>) <span class="keyword">as</span> f_r:</div><div class="line">    f_r.write(str(soup))</div><div class="line">body_str=driver.find_element_by_tag_name(<span class="string">'body'</span>).get_attribute(<span class="string">'innerHTML'</span>)</div><div class="line">soup=BeautifulSoup(body_str, <span class="string">'lxml'</span>)</div><div class="line"><span class="comment"># 打印并退出</span></div><div class="line"><span class="keyword">print</span> soup</div><div class="line">driver.quit()</div></pre></td></tr></table></figure>
<h2 id="提取所需元素"><a href="#提取所需元素" class="headerlink" title="提取所需元素"></a>提取所需元素</h2><p>　　定义函数<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_data</span><span class="params">(html_file)</span>:</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>注：以下代码在函数print_data(html_file)下</strong></p>
<h3 id="打开之前的TXT文档"><a href="#打开之前的TXT文档" class="headerlink" title="打开之前的TXT文档"></a>打开之前的TXT文档</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(html_file,<span class="string">'r'</span>) <span class="keyword">as</span> f_r:</div><div class="line">    text=f_r.read()</div><div class="line">soup=BeautifulSoup(text,<span class="string">'lxml'</span>)</div></pre></td></tr></table></figure>
<h3 id="通过标签查找元素"><a href="#通过标签查找元素" class="headerlink" title="通过标签查找元素"></a>通过标签查找元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取 thead 标签</span></div><div class="line">thead=soup.find(<span class="string">'thead'</span>)</div><div class="line"><span class="comment"># 获取 thead 标签下的所有th标签</span></div><div class="line">th_list=[th.get_text() <span class="keyword">for</span> th <span class="keyword">in</span> thead.find_all(<span class="string">'th'</span>)]</div><div class="line"><span class="comment"># 找到标签为 table 且 id 为 undefined</span></div><div class="line">table=soup.find(<span class="string">'table'</span>,id=<span class="string">"undefined"</span>)</div><div class="line"><span class="comment"># 找到td标签</span></div><div class="line">tr_tag_l1 = [td.get_text() <span class="keyword">for</span> td <span class="keyword">in</span> table.find_all(<span class="string">'td'</span>)]</div></pre></td></tr></table></figure>
<ul>
<li>注：查找的前提是你要去<strong>查看网页源代码</strong>，看看所需要的元素用哪种查找方法更好</li>
</ul>
<p>如图<br><img src="/2017/02/01/Python-爬虫/1.png" alt=""></p>
<h2 id="写入excel表并计算"><a href="#写入excel表并计算" class="headerlink" title="写入excel表并计算"></a>写入excel表并计算</h2><h3 id="创建excel表"><a href="#创建excel表" class="headerlink" title="创建excel表"></a>创建excel表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建 excel 表</span></div><div class="line">workbook = xlwt.Workbook()</div><div class="line"><span class="comment"># 表单名字</span></div><div class="line">sheet = workbook.add_sheet(<span class="string">"score_info"</span>)</div></pre></td></tr></table></figure>
<h3 id="写入元素"><a href="#写入元素" class="headerlink" title="写入元素"></a>写入元素</h3><h4 id="写入标题"><a href="#写入标题" class="headerlink" title="写入标题"></a>写入标题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用enumerate()函数，将所有标题写入 excel 第一行</span></div><div class="line"><span class="comment"># 注意，所有的行数和列数都是从 0 开始</span></div><div class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> enumerate(th_list):</div><div class="line">    <span class="comment"># sheet.write( 行，列，值 ）</span></div><div class="line">    sheet.write(<span class="number">0</span> ,x ,y )</div></pre></td></tr></table></figure>
<h4 id="写入详细信息"><a href="#写入详细信息" class="headerlink" title="写入详细信息"></a>写入详细信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将相关信息全部写入 excel 表</span></div><div class="line">a = <span class="number">0</span>  <span class="comment"># 计算已写个数，用来换行</span></div><div class="line">t = <span class="number">1</span>  <span class="comment"># 记录一共有几行</span></div><div class="line"><span class="keyword">for</span> b <span class="keyword">in</span> tr_tag_l1:</div><div class="line">    sheet.write(t, a, b)</div><div class="line">    a=a+<span class="number">1</span></div><div class="line">    <span class="comment"># 对于什么时候换行，可以自行查看网页源代码，我是直接数的 O.O</span></div><div class="line">    <span class="keyword">if</span> a==<span class="number">11</span>:</div><div class="line">        <span class="comment"># 换到下一行，第一列</span></div><div class="line">        a=<span class="number">0</span></div><div class="line">        t=t+<span class="number">1</span></div></pre></td></tr></table></figure>
<h4 id="写入完成，保存文件"><a href="#写入完成，保存文件" class="headerlink" title="写入完成，保存文件"></a>写入完成，保存文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workbook.save(<span class="string">'score.xls'</span>)</div></pre></td></tr></table></figure>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 读取 excel 文件</span></div><div class="line">wb=xlrd.open_workbook(<span class="string">'score.xls'</span>)</div><div class="line"><span class="comment"># 找到相应的 sheet 表单</span></div><div class="line">sh = wb.sheet_by_name(<span class="string">u'score_info'</span>)</div></pre></td></tr></table></figure>
<h4 id="计算并写入excel表"><a href="#计算并写入excel表" class="headerlink" title="计算并写入excel表"></a>计算并写入excel表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对表中的元素进行计算操作</span></div><div class="line">score_point_sum = <span class="number">0</span> <span class="comment"># 绩点×学分的和</span></div><div class="line">point_sum = <span class="number">0</span> <span class="comment"># 学分总和</span></div><div class="line">line=<span class="number">1</span> <span class="comment"># 行数</span></div><div class="line"><span class="comment"># 在上面统计的总行数 t 之内提取数据计算</span></div><div class="line"><span class="keyword">while</span> line &lt; t :</div><div class="line">    score_point_sum = score_point_sum + float(sh.cell(line,<span class="number">10</span>).value)* float(sh.cell(line,<span class="number">4</span>).value)</div><div class="line">    point_sum = point_sum + float(sh.cell(line,<span class="number">4</span>).value)</div><div class="line">    line=line+<span class="number">1</span></div><div class="line"><span class="comment"># 计算 GPA 并写入 excel 表格</span></div><div class="line">gpa = score_point_sum/point_sum</div><div class="line">sheet.write(t+<span class="number">1</span>,<span class="number">0</span>,<span class="string">'GPA'</span>)</div><div class="line">sheet.write(t+<span class="number">1</span>,<span class="number">1</span>,gpa)</div><div class="line"><span class="keyword">print</span> <span class="string">'GPA:'</span></div><div class="line"><span class="keyword">print</span> gpa</div></pre></td></tr></table></figure>
<h4 id="再次保存"><a href="#再次保存" class="headerlink" title="再次保存"></a>再次保存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workbook.save(<span class="string">'score.xls'</span>)</div></pre></td></tr></table></figure>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"><span class="comment"># 文件路径（根据实际情况编写）</span></div><div class="line">path =<span class="string">'F:/PythonProject/result/'</span></div><div class="line"><span class="comment"># 执行两个函数</span></div><div class="line">receive_code(path)</div><div class="line">print_data(<span class="string">'F:/PythonProject/result/2015-2016-1.txt'</span>)</div></pre></td></tr></table></figure>
<h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><h2 id="代码细节"><a href="#代码细节" class="headerlink" title="代码细节"></a>代码细节</h2><p>如<br><img src="/2017/02/01/Python-爬虫/2.png" alt=""><br>　　网页源代码明明是<code>name=&quot;userName&quot;</code>，我非要用class name查找，愣是报错半天不知道为啥，后来去检查了一下源码，修改后解决问题</p>
<p>再比如<br><img src="/2017/02/01/Python-爬虫/3.png" alt=""><br>　　<strong>find_elements返回的是一个列表,对列表里面的元素无法调用get_attribute</strong><br>　　这个我是真心没发现，网上也查不到这个报错啥意思，就多了一个”s”，墨迹了好长时间。。最后多亏了学长，一下子发现了问题</p>
<h2 id="excel表的相关操作"><a href="#excel表的相关操作" class="headerlink" title="excel表的相关操作"></a>excel表的相关操作</h2><h3 id="标题的写入"><a href="#标题的写入" class="headerlink" title="标题的写入"></a>标题的写入</h3><p>　　查看源代码得知，标题为<code>thead</code>标签下的所有<code>th</code>标签的文本内容，于是使用<code>th_list=[th.get_text() for th in thead.find_all(&#39;th&#39;)]</code>获取到所有的文本值。<br>　　在写入时，需要用到sheet.write()函数，需要写入参数（行、列、内容），本想使用C语言中的多条件for循环，后来发现Python不能这样写。学长告诉我可以使用enumerate()函数（喂这就是PPT的内容好不好），问题解决。</p>
<h3 id="信息的写入"><a href="#信息的写入" class="headerlink" title="信息的写入"></a>信息的写入</h3><p>　　信息和标题有点不同，标题只有一行，直接sheet.write(0,列，值)即可。但是信息有好多行，这就尴尬了。<br>　　第一次选择获取所有的tr标签，然后写入，结果所有信息都写入了第二行，每一个单元格都是某一课程的所有信息，显然有问题<br>　　第二次，还是选择获取tr标签，然后修改sheet.write()的参数值，得到了下面的结果，虽然换行了，但还是写在一个单元格内<br><img src="/2017/02/01/Python-爬虫/4.png" alt=""><br>　　又仔细看一遍网页源代码，发现如果用tr标签获取，则每次都是获取一整条信息，其实也可以用td标签获取，这样获得的就是单个信息<br><img src="/2017/02/01/Python-爬虫/5.png" alt=""><br>　　这样确实可以单个信息写入单元格，但是，它一整行的写了下去，没有换行，没有换行。。。<br>　　采用最笨的办法，数一下标题一共有几个，使用两个计数元素控制行列值。<br>　　结果第一次换行早了，数据错位<br><img src="/2017/02/01/Python-爬虫/6.png" alt=""><br>　　修改判断条件后，问题解决。</p>
<h3 id="GPA的计算"><a href="#GPA的计算" class="headerlink" title="GPA的计算"></a>GPA的计算</h3><p>　　excel表中的某个单元格的值可用函数<code>sh.cell(行,列).value</code>获取，然后根据之前的总行数t，可以进行数据计算。<br><img src="/2017/02/01/Python-爬虫/7.png" alt=""><br>　　发现<code>sh.cell(行,列).value</code>函数获取的值是字符串类型，所以无法直接和int型相加。使用float()强制转换类型即可解决。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>　　保存excel文件时，报错IOError: [Errno 13] Permission denied：<br>　　其实这就是因为excel文件一直在打开状态，所以没有权限，关闭后运行程序即可。</p>
<p>　　还遇到一个小bug，输入自己的学号和密码时，可以正常打印数据并计算<br>　　当我改成别人的账号密码时，运行程序只是成绩信息变了，GPA并没有变- -<br>　　再次执行程序后才显示正确GPA。<br>　　检查了一下代码，感觉问题出在保存excel文件这一步，由于保存和计算的先后顺序，初始顺序是获取数据—计算—保存，所以即使之后的数据变了，<strong>由于没有保存，还是会根据上一次的数据计算</strong>，然后保存。再次执行后，才可根据新数据计算。故应当在打印数据后，先保存一次excel文件。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>　　其实并没有特别的去学Python的语法，这次用到的东西大多数都是封装好的，直接调用即可。<br>　　本以为这个程序的作用是，只要有人在教务处查询绩点，我就可以获取到他的所有信息（现在想想好猥琐啊，但是也好想实现这个功能）。。不过还是学到了不少东西，主要是理解爬虫的思想和方法，以后可仿照此去爬取一个网站的图片、链接之类。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决网页版百度云大文件下载限制]]></title>
      <url>http://hzmyj.github.io/2017/01/31/baiduyun-nolimit/</url>
      <content type="html"><![CDATA[<p>　　前言：本文旨在提供几个解决PC网页版百度云下载大文件时的受限问题，并可通过复制下载链接来变相达到破解限速问题。<br><a id="more"></a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>　　其实百度云分享资源还是挺方便的，如果忽略掉各种吞链接的情况。但是百度云有一个实在让人无法忍受的地方，就是限速。非会员下载限速不说，连上传也限速，还地区性和谐。而且文件超过一定大小限制后，下载时就会提示使用百度云管家，什么鬼！貌似有部分文件类型也无法直接下载，比如安卓apk文件(Are you kidding me ??)。<br>　　而且现在低版本的百度云管家已经登不上了，提示1550010错误，所以破解版基本也用不了了！？期待不久后还有大佬捣鼓出破解版的。<br>　　好了，废话扯了那么多，下面进入正题，今天给各位分享几个解除百度云大文件下载限制的方法。</p>
<p><strong>说在前面：只针对PC端，且所有操作均在Firefox或Chrome浏览器下操作。</strong></p>
<p><strong>关于相关的百度云链接无法访问，可将链接复制到新界面重新打开，至于”貌似挂了”的原因我也不知道- -</strong></p>
<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>　　打开 <a href="http://tampermonkey.net/" target="_blank" rel="external">Tampermonkey</a>，直接下载安装。（如果用FireFox打开该扩展官网，则显示的是FireFox扩展，原理和方法大同小异）<br><img src="/2017/01/31/baiduyun-nolimit/step1.png" alt="扩展官网"><br>　　如果是Chrome，因为是从Google Chrome官方商店下载扩展，所以需要挂SS之类，可直接戳<a href="https://pan.baidu.com/s/1gfFoQB5" target="_blank" rel="external">https://pan.baidu.com/s/1gfFoQB5</a>下载，密码: 47ws。直接拖拽安装(如果不成功，可在扩展程序界面进行拖拽安装)<br>　　安装完毕后浏览器右上角会出现扩展图标<br><img src="/2017/01/31/baiduyun-nolimit/step2.jpg" alt=""><br>　　然后打开网址<a href="https://greasyfork.org/zh-CN/scripts/17800" target="_blank" rel="external">https://greasyfork.org/zh-CN/scripts/17800</a>，选择安装脚本，自动添加脚本到Tampermonkey扩展里<br><img src="/2017/01/31/baiduyun-nolimit/step3.jpg" alt=""><br><img src="/2017/01/31/baiduyun-nolimit/step4.jpg" alt=""><br>　　打开百度云盘相关界面(如果原本已打开则刷新)，脚本打开时如下图显示，可直接下载。之后可以打开下载页面，复制下载链接，然后使用迅雷等工具下载<br><img src="/2017/01/31/baiduyun-nolimit/step5.jpg" alt=""></p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>　　一个更加无脑的扩展，安装即可用，来自另一位博主的分享<a href="http://blog.jarjar.cn/one-line-js-crack-baidu-yun/" target="_blank" rel="external">http://blog.jarjar.cn/one-line-js-crack-baidu-yun/</a>(无耻的做了一次搬运工)<br>　　有人会问那为啥还介绍第一种方法，自找麻烦不是？<br>　　一个原因是本方法的扩展只支持Chrome(我只看到了crx插件)，而方法一支持多种主流浏览器，可按需下载安装；还有就是Tampermonkey还有其他有意思的脚本，安装多个脚本后也便于管理(如有需要自行百度)。<br>　　本方法简单无脑，不过多介绍，直接贴扩展链接<a href="https://pan.baidu.com/s/1pLIwwkF" target="_blank" rel="external">https://pan.baidu.com/s/1pLIwwkF</a> 密码: ymbv，若想更多了解请直接戳原博主链接，另附有github源码</p>
<h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><p>　　直接在浏览器里执行代码，在百度盘的界面打开JS控制台，快捷键Ctrl+Shift+J，输入这行，然后回车<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.defineProperty(Object.getPrototypeOf(navigator),&apos;platform&apos;,&#123;get:function()&#123;return &apos;sb_baidu&apos;;&#125;&#125;)</div></pre></td></tr></table></figure></p>
<p><img src="/2017/01/31/baiduyun-nolimit/step6.jpg" alt=""></p>
<p>　　<strong>以上方法亲测可以，祝愿大家下载愉快~</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 博客搭建]]></title>
      <url>http://hzmyj.github.io/2017/01/29/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>　　本文旨在记录搭建Hexo博客的过程，希望对到访本页的友人一点帮助。<br><a id="more"></a><br>　　博主的博客由于一些原因前后重新搭建了四次，也遇到过不少障碍，有时候这次记得的步骤下次就忘记了，特写一篇较为详尽的博客来记录，以便回访。</p>
<h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><ul>
<li>注册Github账号</li>
<li>安装Git for Windows和Node.js</li>
</ul>
<h3 id="Git-for-windows部署"><a href="#Git-for-windows部署" class="headerlink" title="Git for windows部署"></a>Git for windows部署</h3><p>首先将之前注册的github账号和邮箱初始化给电脑<br>桌面右键运行git bash，依次输入如下指令</p>
<blockquote>
<p>git config –global user.name “yourname”<br>git config –global user.email “youremail”</p>
</blockquote>
<h2 id="二、SSH-key的相关设置"><a href="#二、SSH-key的相关设置" class="headerlink" title="二、SSH key的相关设置"></a>二、SSH key的相关设置</h2><h3 id="Windows下配置SSH并连接到github、github配置SSH-Key"><a href="#Windows下配置SSH并连接到github、github配置SSH-Key" class="headerlink" title="Windows下配置SSH并连接到github、github配置SSH Key"></a>Windows下配置SSH并连接到github、github配置SSH Key</h3><ul>
<li>检查本机是否有SSH Key设置<br>输入命令<code>cd ~/.ssh</code></li>
</ul>
<ol>
<li>若没有，则提示： No such file or director  继续后面步骤</li>
<li>若有，则进入 ~/.ssh路径，<code>rm *</code>删除所有文件</li>
</ol>
<h4 id="使用Git-Bash生成新的ssh-key"><a href="#使用Git-Bash生成新的ssh-key" class="headerlink" title="使用Git Bash生成新的ssh key"></a>使用Git Bash生成新的ssh key</h4><p>输入<br><code>cd ~</code>保证当前路径在”~”下<br><code>ssh-keygen -t rsa -C &quot;xxxx@yy.com&quot;</code>填写真实的邮箱地址，建议选择注册github时的邮箱</p>
<h4 id="添加ssh-key到github"><a href="#添加ssh-key到github" class="headerlink" title="添加ssh key到github"></a>添加ssh key到github</h4><ol>
<li>登录github，点击”▽”-settings-ssh keys-add ssh key</li>
<li>复制id_rsa.pub(用TXT打开，全选)的公钥，添加到相应位置</li>
<li>测试ssh keys是否配置成功,输入指令<blockquote>
<p>ssh -T git@github.com</p>
</blockquote>
</li>
</ol>
<p>　　若出现”Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access”，则设置成功</p>
<h2 id="三、远程连接"><a href="#三、远程连接" class="headerlink" title="三、远程连接"></a>三、远程连接</h2><h3 id="将本地项目通过SSH-push到github"><a href="#将本地项目通过SSH-push到github" class="headerlink" title="将本地项目通过SSH push到github"></a>将本地项目通过SSH push到github</h3><ol>
<li>1 创建目录 <blockquote>
<p>mkdir test<br>cd test</p>
</blockquote>
</li>
<li>2 初始化<blockquote>
<p>git init </p>
</blockquote>
</li>
<li>3.创建 hello.md文件<blockquote>
<p>echo “这是一次测试test ssh key” &gt; hello.md</p>
</blockquote>
</li>
<li>4 提交到本地<blockquote>
<p>git add .<br>git commit -m “add hello.md”   #提交记录说明 </p>
</blockquote>
</li>
<li>5 提交到github<blockquote>
<p>git remote add origin ‘粘贴复制test ssh key的ssh路径’  #<br>git push -u origin master</p>
</blockquote>
</li>
</ol>
<h3 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h3><ul>
<li>执行命令<blockquote>
<p>npm install hexo -g       #全局安装hexo</p>
</blockquote>
</li>
</ul>
<p>　　第一次执行这个操作时，卡在安装过程。后卸载现有node.js并在<a href="https://www.baidu.com/link?url=AqumB_lIyL0_EkHfKb3fmmaUM_RLVYkTGcN7Uz_O_7y&amp;wd=&amp;eqid=b724fee7000b232d0000000557f3401f" target="_blank" rel="external">官网</a>下载最新版本，安装后依然无用。后来在寝室完成安装hexo。推测和下载网速有关。</p>
<ul>
<li>新建目录并转移到目录下<blockquote>
<p>mkdir blog<br>cd blog</p>
</blockquote>
</li>
<li>初始化hexo<blockquote>
<p>hexo init</p>
</blockquote>
</li>
<li>启动<blockquote>
<p>hexo server</p>
</blockquote>
</li>
</ul>
<p>在浏览器中访问localhost:4000，若成则说明hexo配置成功(若按下ctrl+c则停止访问)</p>
<ul>
<li>将本地hexo与远程github关联</li>
<li>修改配置文件<code>_config.yml</code>，用文本编辑器打开，修改最下面<code>deployer</code>属性<br><code>type/repository/branch</code></li>
<li>安装hexo-deployer-git<blockquote>
<p><code>npm install hexo-deployer-git -S</code></p>
</blockquote>
</li>
<li>执行<code>hexo g</code>生成静态网页</li>
<li>执行<code>hexo d</code>部署到远程github</li>
</ul>
<p>　　至此可以直接访问博客，目的达到！   </p>
<p>　　<strong>由上面所有步骤创建出来的只是一个最简单的博客界面，里面的主题、文章 、排版等需要自己编写和设置。</strong></p>
]]></content>
    </entry>
    
  
  
</search>
