<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python-爬虫-获取教务处成绩]]></title>
      <url>http://hzmyj.github.io/2017/02/01/Python-%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p>　　尝试使用Python编写程序爬取教务处网站上的详细成绩单，并计算GPA。</p>
<a id="more"></a>
<h1 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h1><ul>
<li>pycharm  </li>
<li>anaconda2 / Python2.7</li>
<li>phantomJS</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>pycharm是推荐使用的python的IDE，安装即可</li>
<li>anconda2是 Python 科学技术包的合集，有自己的包管理工具 conda，同时支持pip工具，自带了很多常用的python的库，特别是一些很难安装的库。安装过程中，添加python到环境变量中去。</li>
<li>python2.7 是官方下载的python安装包，如果不想使用anaconda2，就安装这个，但装完之后，需要用pip去安装python库。添加python到环境变量中去。注意，如果安装了anaconda2就不用装这个，二选一。</li>
<li>phantomJS 是一个无界面浏览器，作为爬虫的工具使用。无需安装，解压即可。</li>
</ul>
<h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><p>如果你选择anaconda，只需安装selenium库：命令行输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install selenium</div></pre></td></tr></table></figure></p>
<p>如果选择官方python，所有使用到的库都要安装，也是使用pip安装，安装BeautifulSoup：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install bs4</div></pre></td></tr></table></figure></p>
<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><p>　　<strong>编写步骤主要可分为四个模块：模拟登陆、获取并打印网页源代码、提取需要的元素、写入excel表格并计算</strong></p>
<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>　　类似C/C++中的头文件一样，把需要的库导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"><span class="keyword">import</span> xlwt</div></pre></td></tr></table></figure></p>
<h2 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h2><p>　　定义函数 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_code</span><span class="params">(direction)</span>:</span></div></pre></td></tr></table></figure></p>
<p><strong>注：以下代码在函数receive_code(direction)下</strong></p>
<h3 id="打开网页"><a href="#打开网页" class="headerlink" title="打开网页"></a>打开网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 网站链接</span></div><div class="line">URL = <span class="string">'http://sso.jwc.whut.edu.cn/Certification//toIndex.do'</span></div><div class="line"><span class="comment"># 浏览器路径</span></div><div class="line">phantomjs_path=<span class="string">'E:/phantomjs-2.1.1-windows/bin/phantomjs.exe'</span></div><div class="line">driver = webdriver.PhantomJS(phantomjs_path)</div><div class="line"><span class="comment"># 设置最大等待时间</span></div><div class="line">driver.implicitly_wait(<span class="number">5</span>)</div><div class="line"><span class="comment"># 打开网页</span></div><div class="line">driver.get(URL)</div></pre></td></tr></table></figure>
<p>　　可设置浏览器最大等待时间，代码为<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.implicitly_wait(time)</div></pre></td></tr></table></figure></p>
<h3 id="登陆网页"><a href="#登陆网页" class="headerlink" title="登陆网页"></a>登陆网页</h3><p>　　可通过以下方法定位元素（<strong>在网页源代码中</strong>）<br>定位单个元素<br>find_element_by_id<br>find_element_by_name<br>find_element_by_xpath<br>find_element_by_link_text<br>find_element_by_partial_link_text<br>find_element_by_tag_name<br>find_element_by_class_name<br>find_element_by_css_selector</p>
<p>定位多个元素<br>find_elements_by_name<br>find_elements_by_xpath<br>find_elements_by_link_text<br>find_elements_by_partial_link_text<br>find_elements_by_tag_name<br>find_elements_by_class_name<br>find_elements_by_css_selector<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 通过 name 找到用户名和密码（需要查看网页源代码，后面同）</span></div><div class="line">userName_tag = driver.find_element_by_name(<span class="string">'userName'</span>)</div><div class="line">password_tag = driver.find_element_by_name(<span class="string">'password'</span>)</div><div class="line"><span class="comment"># 模拟登陆，输入学号和密码（要正确的！这不是胡乱填的）</span></div><div class="line">userName_tag.send_keys(<span class="string">'0121510880318'</span>)</div><div class="line">password_tag.send_keys(<span class="string">'xxxxxx'</span>)</div><div class="line">driver.find_element_by_id(<span class="string">'imageField'</span>).submit()</div><div class="line">driver.find_element_by_link_text(<span class="string">'成绩查询'</span>).click()</div><div class="line">driver.find_element_by_link_text(<span class="string">'历史成绩查询'</span>).click()</div><div class="line">select_tag = driver.find_element_by_id(<span class="string">'lscj_xnxq'</span>)</div><div class="line">xnxq_list = [<span class="string">'2015-2016-1'</span>,<span class="string">'2015-2016-2'</span>]</div></pre></td></tr></table></figure></p>
<p>　　至此模拟进入”历史成绩查询界面”</p>
<h2 id="打印网页源代码"><a href="#打印网页源代码" class="headerlink" title="打印网页源代码"></a>打印网页源代码</h2><h3 id="获取HTML代码"><a href="#获取HTML代码" class="headerlink" title="获取HTML代码"></a>获取HTML代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> xnxq <span class="keyword">in</span> xnxq_list:</div><div class="line">    <span class="comment"># 点击学年学期</span></div><div class="line">    select_tag.find_element_by_xpath(<span class="string">"//option[@value='&#123;0&#125;']"</span>.format(xnxq)).click()</div><div class="line">    <span class="comment"># 获取 body 中的文本值</span></div><div class="line">    body_str=driver.find_element_by_tag_name(<span class="string">'body'</span>).get_attribute(<span class="string">'innerHTML'</span>)</div></pre></td></tr></table></figure>
<h3 id="打印到txt文档里"><a href="#打印到txt文档里" class="headerlink" title="打印到txt文档里"></a>打印到txt文档里</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">soup=BeautifulSoup(body_str, <span class="string">'lxml'</span>)</div><div class="line">    <span class="keyword">with</span> open(os.path.join(direction,  xnxq+<span class="string">'.txt'</span>),<span class="string">'w'</span>) <span class="keyword">as</span> f_r:</div><div class="line">    f_r.write(str(soup))</div><div class="line">body_str=driver.find_element_by_tag_name(<span class="string">'body'</span>).get_attribute(<span class="string">'innerHTML'</span>)</div><div class="line">soup=BeautifulSoup(body_str, <span class="string">'lxml'</span>)</div><div class="line"><span class="comment"># 打印并退出</span></div><div class="line"><span class="keyword">print</span> soup</div><div class="line">driver.quit()</div></pre></td></tr></table></figure>
<h2 id="提取所需元素"><a href="#提取所需元素" class="headerlink" title="提取所需元素"></a>提取所需元素</h2><p>　　定义函数<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_data</span><span class="params">(html_file)</span>:</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>注：以下代码在函数print_data(html_file)下</strong></p>
<h3 id="打开之前的TXT文档"><a href="#打开之前的TXT文档" class="headerlink" title="打开之前的TXT文档"></a>打开之前的TXT文档</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(html_file,<span class="string">'r'</span>) <span class="keyword">as</span> f_r:</div><div class="line">    text=f_r.read()</div><div class="line">soup=BeautifulSoup(text,<span class="string">'lxml'</span>)</div></pre></td></tr></table></figure>
<h3 id="通过标签查找元素"><a href="#通过标签查找元素" class="headerlink" title="通过标签查找元素"></a>通过标签查找元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取 thead 标签</span></div><div class="line">thead=soup.find(<span class="string">'thead'</span>)</div><div class="line"><span class="comment"># 获取 thead 标签下的所有th标签</span></div><div class="line">th_list=[th.get_text() <span class="keyword">for</span> th <span class="keyword">in</span> thead.find_all(<span class="string">'th'</span>)]</div><div class="line"><span class="comment"># 找到标签为 table 且 id 为 undefined</span></div><div class="line">table=soup.find(<span class="string">'table'</span>,id=<span class="string">"undefined"</span>)</div><div class="line"><span class="comment"># 找到td标签</span></div><div class="line">tr_tag_l1 = [td.get_text() <span class="keyword">for</span> td <span class="keyword">in</span> table.find_all(<span class="string">'td'</span>)]</div></pre></td></tr></table></figure>
<ul>
<li>注：查找的前提是你要去<strong>查看网页源代码</strong>，看看所需要的元素用哪种查找方法更好</li>
</ul>
<p>如图<br><img src="/2017/02/01/Python-爬虫/1.png" alt=""></p>
<h2 id="写入excel表并计算"><a href="#写入excel表并计算" class="headerlink" title="写入excel表并计算"></a>写入excel表并计算</h2><h3 id="创建excel表"><a href="#创建excel表" class="headerlink" title="创建excel表"></a>创建excel表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建 excel 表</span></div><div class="line">workbook = xlwt.Workbook()</div><div class="line"><span class="comment"># 表单名字</span></div><div class="line">sheet = workbook.add_sheet(<span class="string">"score_info"</span>)</div></pre></td></tr></table></figure>
<h3 id="写入元素"><a href="#写入元素" class="headerlink" title="写入元素"></a>写入元素</h3><h4 id="写入标题"><a href="#写入标题" class="headerlink" title="写入标题"></a>写入标题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用enumerate()函数，将所有标题写入 excel 第一行</span></div><div class="line"><span class="comment"># 注意，所有的行数和列数都是从 0 开始</span></div><div class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> enumerate(th_list):</div><div class="line">    <span class="comment"># sheet.write( 行，列，值 ）</span></div><div class="line">    sheet.write(<span class="number">0</span> ,x ,y )</div></pre></td></tr></table></figure>
<h4 id="写入详细信息"><a href="#写入详细信息" class="headerlink" title="写入详细信息"></a>写入详细信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将相关信息全部写入 excel 表</span></div><div class="line">a = <span class="number">0</span>  <span class="comment"># 计算已写个数，用来换行</span></div><div class="line">t = <span class="number">1</span>  <span class="comment"># 记录一共有几行</span></div><div class="line"><span class="keyword">for</span> b <span class="keyword">in</span> tr_tag_l1:</div><div class="line">    sheet.write(t, a, b)</div><div class="line">    a=a+<span class="number">1</span></div><div class="line">    <span class="comment"># 对于什么时候换行，可以自行查看网页源代码，我是直接数的 O.O</span></div><div class="line">    <span class="keyword">if</span> a==<span class="number">11</span>:</div><div class="line">        <span class="comment"># 换到下一行，第一列</span></div><div class="line">        a=<span class="number">0</span></div><div class="line">        t=t+<span class="number">1</span></div></pre></td></tr></table></figure>
<h4 id="写入完成，保存文件"><a href="#写入完成，保存文件" class="headerlink" title="写入完成，保存文件"></a>写入完成，保存文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workbook.save(<span class="string">'score.xls'</span>)</div></pre></td></tr></table></figure>
<h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 读取 excel 文件</span></div><div class="line">wb=xlrd.open_workbook(<span class="string">'score.xls'</span>)</div><div class="line"><span class="comment"># 找到相应的 sheet 表单</span></div><div class="line">sh = wb.sheet_by_name(<span class="string">u'score_info'</span>)</div></pre></td></tr></table></figure>
<h4 id="计算并写入excel表"><a href="#计算并写入excel表" class="headerlink" title="计算并写入excel表"></a>计算并写入excel表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对表中的元素进行计算操作</span></div><div class="line">score_point_sum = <span class="number">0</span> <span class="comment"># 绩点×学分的和</span></div><div class="line">point_sum = <span class="number">0</span> <span class="comment"># 学分总和</span></div><div class="line">line=<span class="number">1</span> <span class="comment"># 行数</span></div><div class="line"><span class="comment"># 在上面统计的总行数 t 之内提取数据计算</span></div><div class="line"><span class="keyword">while</span> line &lt; t :</div><div class="line">    score_point_sum = score_point_sum + float(sh.cell(line,<span class="number">10</span>).value)* float(sh.cell(line,<span class="number">4</span>).value)</div><div class="line">    point_sum = point_sum + float(sh.cell(line,<span class="number">4</span>).value)</div><div class="line">    line=line+<span class="number">1</span></div><div class="line"><span class="comment"># 计算 GPA 并写入 excel 表格</span></div><div class="line">gpa = score_point_sum/point_sum</div><div class="line">sheet.write(t+<span class="number">1</span>,<span class="number">0</span>,<span class="string">'GPA'</span>)</div><div class="line">sheet.write(t+<span class="number">1</span>,<span class="number">1</span>,gpa)</div><div class="line"><span class="keyword">print</span> <span class="string">'GPA:'</span></div><div class="line"><span class="keyword">print</span> gpa</div></pre></td></tr></table></figure>
<h4 id="再次保存"><a href="#再次保存" class="headerlink" title="再次保存"></a>再次保存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workbook.save(<span class="string">'score.xls'</span>)</div></pre></td></tr></table></figure>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"><span class="comment"># 文件路径（根据实际情况编写）</span></div><div class="line">path =<span class="string">'F:/PythonProject/result/'</span></div><div class="line"><span class="comment"># 执行两个函数</span></div><div class="line">receive_code(path)</div><div class="line">print_data(<span class="string">'F:/PythonProject/result/2015-2016-1.txt'</span>)</div></pre></td></tr></table></figure>
<h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><h2 id="代码细节"><a href="#代码细节" class="headerlink" title="代码细节"></a>代码细节</h2><p>如<br><img src="/2017/02/01/Python-爬虫/2.png" alt=""><br>　　网页源代码明明是<code>name=&quot;userName&quot;</code>，我非要用class name查找，愣是报错半天不知道为啥，后来去检查了一下源码，修改后解决问题</p>
<p>再比如<br><img src="/2017/02/01/Python-爬虫/3.png" alt=""><br>　　<strong>find_elements返回的是一个列表,对列表里面的元素无法调用get_attribute</strong><br>　　这个我是真心没发现，网上也查不到这个报错啥意思，就多了一个”s”，墨迹了好长时间。。最后多亏了学长，一下子发现了问题</p>
<h2 id="excel表的相关操作"><a href="#excel表的相关操作" class="headerlink" title="excel表的相关操作"></a>excel表的相关操作</h2><h3 id="标题的写入"><a href="#标题的写入" class="headerlink" title="标题的写入"></a>标题的写入</h3><p>　　查看源代码得知，标题为<code>thead</code>标签下的所有<code>th</code>标签的文本内容，于是使用<code>th_list=[th.get_text() for th in thead.find_all(&#39;th&#39;)]</code>获取到所有的文本值。<br>　　在写入时，需要用到sheet.write()函数，需要写入参数（行、列、内容），本想使用C语言中的多条件for循环，后来发现Python不能这样写。学长告诉我可以使用enumerate()函数（喂这就是PPT的内容好不好），问题解决。</p>
<h3 id="信息的写入"><a href="#信息的写入" class="headerlink" title="信息的写入"></a>信息的写入</h3><p>　　信息和标题有点不同，标题只有一行，直接sheet.write(0,列，值)即可。但是信息有好多行，这就尴尬了。<br>　　第一次选择获取所有的tr标签，然后写入，结果所有信息都写入了第二行，每一个单元格都是某一课程的所有信息，显然有问题<br>　　第二次，还是选择获取tr标签，然后修改sheet.write()的参数值，得到了下面的结果，虽然换行了，但还是写在一个单元格内<br><img src="/2017/02/01/Python-爬虫/4.png" alt=""><br>　　又仔细看一遍网页源代码，发现如果用tr标签获取，则每次都是获取一整条信息，其实也可以用td标签获取，这样获得的就是单个信息<br><img src="/2017/02/01/Python-爬虫/5.png" alt=""><br>　　这样确实可以单个信息写入单元格，但是，它一整行的写了下去，没有换行，没有换行。。。<br>　　采用最笨的办法，数一下标题一共有几个，使用两个计数元素控制行列值。<br>　　结果第一次换行早了，数据错位<br><img src="/2017/02/01/Python-爬虫/6.png" alt=""><br>　　修改判断条件后，问题解决。</p>
<h3 id="GPA的计算"><a href="#GPA的计算" class="headerlink" title="GPA的计算"></a>GPA的计算</h3><p>　　excel表中的某个单元格的值可用函数<code>sh.cell(行,列).value</code>获取，然后根据之前的总行数t，可以进行数据计算。<br><img src="/2017/02/01/Python-爬虫/7.png" alt=""><br>　　发现<code>sh.cell(行,列).value</code>函数获取的值是字符串类型，所以无法直接和int型相加。使用float()强制转换类型即可解决。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>　　保存excel文件时，报错IOError: [Errno 13] Permission denied：<br>　　其实这就是因为excel文件一直在打开状态，所以没有权限，关闭后运行程序即可。</p>
<p>　　还遇到一个小bug，输入自己的学号和密码时，可以正常打印数据并计算<br>　　当我改成别人的账号密码时，运行程序只是成绩信息变了，GPA并没有变- -<br>　　再次执行程序后才显示正确GPA。<br>　　检查了一下代码，感觉问题出在保存excel文件这一步，由于保存和计算的先后顺序，初始顺序是获取数据—计算—保存，所以即使之后的数据变了，<strong>由于没有保存，还是会根据上一次的数据计算</strong>，然后保存。再次执行后，才可根据新数据计算。故应当在打印数据后，先保存一次excel文件。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>　　其实并没有特别的去学Python的语法，这次用到的东西大多数都是封装好的，直接调用即可。<br>　　本以为这个程序的作用是，只要有人在教务处查询绩点，我就可以获取到他的所有信息（现在想想好猥琐啊，但是也好想实现这个功能）。。不过还是学到了不少东西，主要是理解爬虫的思想和方法，以后可仿照此去爬取一个网站的图片、链接之类。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决网页版百度云大文件下载限制]]></title>
      <url>http://hzmyj.github.io/2017/01/31/baiduyun-nolimit/</url>
      <content type="html"><![CDATA[<p>　　前言：本文旨在提供几个解决PC网页版百度云下载大文件时的受限问题，并可通过复制下载链接来变相达到破解限速问题。<br><a id="more"></a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>　　其实百度云分享资源还是挺方便的，如果忽略掉各种吞链接的情况。但是百度云有一个实在让人无法忍受的地方，就是限速。非会员下载限速不说，连上传也限速，还地区性和谐。而且文件超过一定大小限制后，下载时就会提示使用百度云管家，什么鬼！貌似有部分文件类型也无法直接下载，比如安卓apk文件(Are you kidding me ??)。<br>　　而且现在低版本的百度云管家已经登不上了，提示1550010错误，所以破解版基本也用不了了！？期待不久后还有大佬捣鼓出破解版的。<br>　　好了，废话扯了那么多，下面进入正题，今天给各位分享几个解除百度云大文件下载限制的方法。</p>
<p><strong>说在前面：只针对PC端，且所有操作均在Firefox或Chrome浏览器下操作。</strong></p>
<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>　　打开 <a href="http://tampermonkey.net/" target="_blank" rel="external">Tampermonkey</a>，直接下载安装。（如果用FireFox打开该扩展官网，则显示的是FireFox扩展，原理和方法大同小异）<br><img src="/2017/01/31/baiduyun-nolimit/step1.png" alt="扩展官网"><br>　　如果是Chrome，因为是从Google Chrome官方商店下载扩展，所以需要挂SS之类，可直接戳<a href="https://pan.baidu.com/s/1dF87s2H" target="_blank" rel="external">https://pan.baidu.com/s/1dF87s2H</a>下载，密码: i62r。直接拖拽安装(如果不成功，可在扩展程序界面进行拖拽安装)<br>　　安装完毕后浏览器右上角会出现扩展图标<br><img src="/2017/01/31/baiduyun-nolimit/step2.jpg" alt=""><br>　　然后打开网址<a href="https://greasyfork.org/zh-CN/scripts/17800" target="_blank" rel="external">https://greasyfork.org/zh-CN/scripts/17800</a>，选择安装脚本，自动添加脚本到Tampermonkey扩展里<br><img src="/2017/01/31/baiduyun-nolimit/step3.jpg" alt=""><br><img src="/2017/01/31/baiduyun-nolimit/step4.jpg" alt=""><br>　　打开百度云盘相关界面(如果原本已打开则刷新)，脚本打开时如下图显示，可直接下载。之后可以打开下载页面，复制下载链接，然后使用迅雷等工具下载<br><img src="/2017/01/31/baiduyun-nolimit/step5.jpg" alt=""></p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>　　一个更加无脑的扩展，安装即可用，来自另一位博主的分享<a href="http://blog.jarjar.cn/one-line-js-crack-baidu-yun/" target="_blank" rel="external">http://blog.jarjar.cn/one-line-js-crack-baidu-yun/</a>(无耻的做了一次搬运工)<br>　　有人会问那为啥还介绍第一种方法，自找麻烦不是？<br>　　一个原因是本方法的扩展只支持Chrome(我只看到了crx插件)，而方法一支持多种主流浏览器，可按需下载安装；还有就是Tampermonkey还有其他有意思的脚本，安装多个脚本后也便于管理(如有需要自行百度)。<br>　　本方法简单无脑，不过多介绍，直接贴扩展链接<a href="https://pan.baidu.com/s/1pLIwwkF" target="_blank" rel="external">https://pan.baidu.com/s/1pLIwwkF</a> 密码: ymbv，若想更多了解请直接戳原博主链接，另附有github源码</p>
<h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><p>　　直接在浏览器里执行代码，在百度盘的界面打开JS控制台，快捷键Ctrl+Shift+J，输入这行，然后回车<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.defineProperty(Object.getPrototypeOf(navigator),&apos;platform&apos;,&#123;get:function()&#123;return &apos;sb_baidu&apos;;&#125;&#125;)</div></pre></td></tr></table></figure></p>
<p><img src="/2017/01/31/baiduyun-nolimit/step6.jpg" alt=""></p>
<p>　　<strong>以上方法亲测可以，祝愿大家下载愉快~</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 博客搭建]]></title>
      <url>http://hzmyj.github.io/2017/01/29/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>　　本文旨在记录搭建Hexo博客的过程，希望对到访本页的友人一点帮助。<br><a id="more"></a><br>　　博主的博客由于一些原因前后重新搭建了四次，也遇到过不少障碍，有时候这次记得的步骤下次就忘记了，特写一篇较为详尽的博客来记录，以便回访。</p>
<h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><ul>
<li>注册Github账号</li>
<li>安装Git for Windows和Node.js</li>
</ul>
<h3 id="Git-for-windows部署"><a href="#Git-for-windows部署" class="headerlink" title="Git for windows部署"></a>Git for windows部署</h3><p>首先将之前注册的github账号和邮箱初始化给电脑<br>桌面右键运行git bash，依次输入如下指令</p>
<blockquote>
<p>git config –global user.name “yourname”<br>git config –global user.email “youremail”</p>
</blockquote>
<h2 id="二、SSH-key的相关设置"><a href="#二、SSH-key的相关设置" class="headerlink" title="二、SSH key的相关设置"></a>二、SSH key的相关设置</h2><h3 id="Windows下配置SSH并连接到github、github配置SSH-Key"><a href="#Windows下配置SSH并连接到github、github配置SSH-Key" class="headerlink" title="Windows下配置SSH并连接到github、github配置SSH Key"></a>Windows下配置SSH并连接到github、github配置SSH Key</h3><ul>
<li>检查本机是否有SSH Key设置<br>输入命令<code>cd ~/.ssh</code></li>
</ul>
<ol>
<li>若没有，则提示： No such file or director  继续后面步骤</li>
<li>若有，则进入 ~/.ssh路径，<code>rm *</code>删除所有文件</li>
</ol>
<h4 id="使用Git-Bash生成新的ssh-key"><a href="#使用Git-Bash生成新的ssh-key" class="headerlink" title="使用Git Bash生成新的ssh key"></a>使用Git Bash生成新的ssh key</h4><p>输入<br><code>cd ~</code>保证当前路径在”~”下<br><code>ssh-keygen -t rsa -C &quot;xxxx@yy.com&quot;</code>填写真实的邮箱地址，建议选择注册github时的邮箱</p>
<h4 id="添加ssh-key到github"><a href="#添加ssh-key到github" class="headerlink" title="添加ssh key到github"></a>添加ssh key到github</h4><ol>
<li>登录github，点击”▽”-settings-ssh keys-add ssh key</li>
<li>复制id_rsa.pub(用TXT打开，全选)的公钥，添加到相应位置</li>
<li>测试ssh keys是否配置成功,输入指令<blockquote>
<p>ssh -T git@github.com</p>
</blockquote>
</li>
</ol>
<p>　　若出现”Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access”，则设置成功</p>
<h2 id="三、远程连接"><a href="#三、远程连接" class="headerlink" title="三、远程连接"></a>三、远程连接</h2><h3 id="将本地项目通过SSH-push到github"><a href="#将本地项目通过SSH-push到github" class="headerlink" title="将本地项目通过SSH push到github"></a>将本地项目通过SSH push到github</h3><ol>
<li>1 创建目录 <blockquote>
<p>mkdir test<br>cd test</p>
</blockquote>
</li>
<li>2 初始化<blockquote>
<p>git init </p>
</blockquote>
</li>
<li>3.创建 hello.md文件<blockquote>
<p>echo “这是一次测试test ssh key” &gt; hello.md</p>
</blockquote>
</li>
<li>4 提交到本地<blockquote>
<p>git add .<br>git commit -m “add hello.md”   #提交记录说明 </p>
</blockquote>
</li>
<li>5 提交到github<blockquote>
<p>git remote add origin ‘粘贴复制test ssh key的ssh路径’  #<br>git push -u origin master</p>
</blockquote>
</li>
</ol>
<h3 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h3><ul>
<li>执行命令<blockquote>
<p>npm install hexo -g       #全局安装hexo</p>
</blockquote>
</li>
</ul>
<p>　　第一次执行这个操作时，卡在安装过程。后卸载现有node.js并在<a href="https://www.baidu.com/link?url=AqumB_lIyL0_EkHfKb3fmmaUM_RLVYkTGcN7Uz_O_7y&amp;wd=&amp;eqid=b724fee7000b232d0000000557f3401f" target="_blank" rel="external">官网</a>下载最新版本，安装后依然无用。后来在寝室完成安装hexo。推测和下载网速有关。</p>
<ul>
<li>新建目录并转移到目录下<blockquote>
<p>mkdir blog<br>cd blog</p>
</blockquote>
</li>
<li>初始化hexo<blockquote>
<p>hexo init</p>
</blockquote>
</li>
<li>启动<blockquote>
<p>hexo server</p>
</blockquote>
</li>
</ul>
<p>在浏览器中访问localhost:4000，若成则说明hexo配置成功(若按下ctrl+c则停止访问)</p>
<ul>
<li>将本地hexo与远程github关联</li>
<li>修改配置文件_config.yml，用文本编辑器打开，修改最下面deployer属性<br>type/repository/branch</li>
<li>安装hexo-deployer-git<blockquote>
<p>npm install hexo-deployer-git -S</p>
</blockquote>
</li>
<li>执行hexo g生成静态网页</li>
<li>执行hexo d部署到远程github</li>
</ul>
<p>　　至此可以直接访问博客，目的达到！   </p>
<p>　　<strong>由上面所有步骤创建出来的只是一个最简单的博客界面，里面的主题、文章 、排版等需要自己编写和设置。</strong></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>　　讲道理，自己动手做一个东西，感觉是非常奇妙的。你需要自己解决所遇到的各种问题，有时候可能只是拼写错误这种小事，有时会出现一个新错误，不过问问度娘就可以解决掉，但你也可能遇到一些无法理解也根本找不到解决办法的“玄学问题”，也许只能重新来过了。<br>　　你需要耐心的去分析、解决问题，在后来的操作过程中更加仔细、认真。一些错误的出现，也会对一些代码、命令语句、错误报告有更深入的理解。这个过程是宝贵的。<br>　　在写博客时，需要自己去学习一下markdown语法，这个语法特别简单，用着很舒心。<br>　　学习的过程永远是最享受最富有乐趣的，尤其是当你回过头来看时。</p>
]]></content>
    </entry>
    
  
  
</search>
